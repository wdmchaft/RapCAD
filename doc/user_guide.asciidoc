////
 *   RapCAD - Rapid prototyping CAD IDE (www.rapcad.org)
 *   Copyright (C) 2010  Giles Bathgate
 *
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
////

User Guide
----------

For command line options see the link:manual.html[RapCAD manual]

Declarations
~~~~~~~~~~~~
A declaration is used to announce the existence of the element within the
document. They can be variables, constants, and parametric values.

Variables
^^^^^^^^^
A variable stores a value *which can change*. Variables are declared by
assigning them to a value. This could be a <<_literals,literal>> value, the
result of a <<_functions,function>> or simply another variable.

Examples
++++++++
[source,csharp]
------------------------------
a=1;
b=a;
a=2;
------------------------------

Constants
^^^^^^^^^
Constants are used to store values which should never change. A constant can be
assigned to a value once, but subsequent attempts to change the value of the
constant results in an error.

Examples
++++++++
[source,csharp]
------------------------------
const a=1;
b=a;
a=2; //error
------------------------------

Parametric Values
^^^^^^^^^^^^^^^^^
Parametric values are values which are intended to be changed. They are used
for variables that modify the design in a consistent way. For example if your
design was describing a gear you might use a parameteric value to represent the
number of teeth, but you would use a variable to store the value of the pitch.

Example
+++++++
[source,csharp]
------------------------------
param teeth=50;
pitch=teeth*m/cos(u);
------------------------------

Literals
~~~~~~~~
Literals are basic values that can be writtern into the document to represent
values that the design will use.

Undefined
^^^^^^^^^
The special value of 'undef' allows you to assign or compare values to nothing.

Examples
++++++++
[source,csharp]
------------------------------
a=undef;
if(a==undef) ...
------------------------------

Number
^^^^^^
Numbers can be used to represent any rational numerical value. They can be
integers, decimals, or negative numbers.

Examples
++++++++
[source,csharp]
------------------------------
a=1;
b=5.1;
c=-0.006;
d=.5;
------------------------------

Text
^^^^
Text can be used to represent writtern words or characters. Escape sequences
exist for tab, quote, return, newline and backslash.

Examples
++++++++
[source,csharp]
------------------------------
a="Hello World!\n";
a="The quick brown fox \tjumps \"over\" the lazy dog.\r\n";
a="C:\\Documents\\Shape.stl"
------------------------------

Boolean
^^^^^^^
Booleans can represent a value of true or false.

Examples
++++++++
[source,csharp]
------------------------------
a=true;
b=false;
------------------------------

Vector
^^^^^^
Vectors are used to represent lists of values. Vectors can be nested inside
other vectors. Vectors do not have to contain all values of the same type.

Examples
++++++++
[source,csharp]
-------------------------------------------------
a=[1.1,10,1.5];
b=[[1,2,3],[1,1,1],[15,12,2]];
c=[5,"Hello",[1,2,3]];
-------------------------------------------------

[NOTE]
===============================================================================
In RapCAD commas are not allowed at the end of a vector because it it often a
sign of error which arises from writing code in the following way.

[source,csharp]
---------------
a=[ 1,
    2,
    3,
  ];
---------------

This vector will have four elements instead of the intended three elements, the
last element being undefined. In the unlikely event that you really do want a
four element vector with the last element undefined then you can use the
'undef' keyword explicitly.

[source,csharp]
-------------------------------------------------
a=[,10,10]; // means [undef,10,10]
b=[10,10];  // means [10,10]
c=[10,,10]; // means [10,undef,10]
d=[10,10,]; // syntax error use [10,10,undef] <1>
-------------------------------------------------

<1> Since index out of bounds errors are not desired, RapCAD will treat vectors
containing less elements than expected as though the elements exist but are
undefined. Thus if we expect a 3D vector, but are given a 2D vector such as
[10,10] RapCAD will treat this as [10,10,undef] you can therefore treat
[10,10,undef] as synonymous to [10,10] so in the example above you could simply
write d=[10,10] if you prefer.
===============================================================================

Range
^^^^^
Range values are a more effficient way of representing a list of sequential
values. Rather than having to specify every value in the list, only the start
and end values need be specified. Optionally a value can be used to specify
the step by which each value should be incremented.

Examples
++++++++
[source,csharp]
------------------------------
a=[1:5];    // 1,2,3,4,5
b=[0:2:10]; // 2,4,6,8,10
------------------------------

Operators
~~~~~~~~~

Add
^^^

Subtract
^^^^^^^^

Divide
^^^^^^

Statements
~~~~~~~~~~

Assign
^^^^^^

Assignment is simply done using the equals operator. As long as a variable is
not declared const or param it can be re-assigned as many times as you like.

Examples
++++++++
[source,csharp]
-------------------------------------
a=5;
a=6;
-------------------------------------

Append
^^^^^^
Examples
++++++++
[source,csharp]
-------------------------------------
a="foo";
a~="bar";

b=[1,2,3];
b~=[4,5,6];
-------------------------------------


If Else
^^^^^^^
Examples
++++++++
[source,csharp]
-------------------------------------
if(a>1)
  echo("a is greater than 1");
else
  echo("a is not greater than 1");
-------------------------------------


For
^^^
Examples
++++++++
[source,csharp]
-------------------------------------
for(i=[0:10])
  echo(i);
-------------------------------------

Functions
~~~~~~~~~

Functions are used to group a set of statements together and calculate a value.

Function Declarations
^^^^^^^^^^^^^^^^^^^^^
There are two forms of function declaration. Inline functions can only perform
one statement. Functions with bodies can perform a set of statements and must
use the 'return' keyword to return a result.

Examples
++++++++
[source,csharp]
-------------------------------------
function diameter_to_radius(d) = d/2;

function calculate(c) {
  const a=12;
  b=c/a;
  return b;
}
-------------------------------------

Built-in Functions
^^^^^^^^^^^^^^^^^^

include::functions.asciidoc[]

Built-in Modules
~~~~~~~~~~~~~~~~

RapCAD supports a set of built in modules. The modules take arguments which
for example specify the size and shape of a primitive. A module
is instanciated by writing its name followed by parenthesis which enclose the
arguments. Since it is also a statement it must be followed by a semicolon.

RapCAD is very consistent when it comes to parameter names. The parameters for
all built in modules take a either a long name, single letter name, or
parameters can simply be specified by position. All parameters are optional.

include::modules.asciidoc[]
